generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  ANY
}

enum SubscriptionStatus {
  FREE
  BOOST
  WEEKLY
  YEARLY
}

model User {
  id               String           @id @default(uuid())
  email            String?          @unique
  name             String?          // متوافق مع NextAuth
  displayName      String?
  profileMessage   String?
  gender           Gender           @default(ANY)
  lookingFor       Gender?          // لأجل المطابقة
  country          String?
  image            String?
  socialInstagram  String?
  socialFacebook   String?
  socialSnapchat   String?
  isBoosted        Boolean          @default(false)
  jsonSettings     Json?            // تفضيلات المستخدم

  subscription     Subscription?

  accounts         Account[]
  sessions         Session[]
  reportsSent      Report[]         @relation("ReportsSent")
  reportsReceived  Report[]         @relation("ReportsReceived")

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Subscription {
  id          String               @id @default(uuid())
  status      SubscriptionStatus
  expiresAt   DateTime?
  user        User                 @relation(fields: [userId], references: [id])
  userId      String               @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Report {
  id          String   @id @default(uuid())
  reporterId  String
  reportedId  String
  reason      String
  timestamp   DateTime @default(now())

  reporter    User     @relation("ReportsSent", fields: [reporterId], references: [id])
  reported    User     @relation("ReportsReceived", fields: [reportedId], references: [id])
}
